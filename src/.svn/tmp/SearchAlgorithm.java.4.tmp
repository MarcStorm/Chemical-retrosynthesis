import utilities.*;

import java.util.*;
import java.util.PriorityQueue;

public class SearchAlgorithm {

    public static int stateCount;

    public static boolean breadthFirstSearch(HashMap<String, Integer> problems, KnowledgeBase knowledgeBase) {

        int depth = 0;

        //Create initial node with default values.
        Node initialNode = new Node(problems, null, 0, depth);

        // Might not be necessary to have this if-statement for our problem.
        /*if(goalTest(initialNode)) {
            return solution(initialNode);
        }*/

        HashSet<HashMap<String, Integer>> explored = new HashSet<>();

        LinkedList<Node> frontier = new LinkedList<>();
        frontier.addLast(initialNode);

        //Variables for print statements.
//        int exploredSize = 0;
//        int newStateCount = 0;

        for(;;) {
            //If frontier is empty, there are no more problems to solve and the result must be false.
            if(frontier.isEmpty()) {
                return false;
            }

            Node node = frontier.removeFirst();
            if (node.depth != depth) {
                depth = node.depth;
//                System.out.println("Depth = " + depth);
//                System.out.println("Amount of states = " + newStateCount);
//                System.out.println("Amount of stored states = " + exploredSize);
            }

            for (String key : node.state.keySet()) {
                if (node.state.get(key) < 0) {

                    //Get all the reactions that possibly can solve a state.
                    List<Reaction> reactions = knowledgeBase.getReactionsOf(key);

                    /* If there are no reactions for a molecule the list will be null. If the list is null
                    the for loop should continue.*/
                    if (reactions == null) {
                        continue;
                    }


                    for (Reaction reaction : reactions) {
                        HashMap<String, Integer> newState = new HashMap<>(node.state);

                        //Merge the state with the new state. That is the coefficients of the molecules.
                        reaction.getMap().forEach((k, v) -> newState.merge(k, v, (v1, v2) -> v1 + v2));

                        //Clean the state for all molecules that have the coefficient 0.
                        cleanState(newState);

                        //If the state contains nothing but positive coefficient there are no more problems to solve
                        //and a solution have been found.
                        if (goalTest(newState)) {
                            System.out.println("Solution:");
                            System.out.println(solution(reaction.toString() + "\n", node));
//                            System.out.println("Amount of states = " + newStateCount);
//                            System.out.println("Amount of stored states = " + exploredSize);
                            return true;
                        }

                        Node newNode = new Node(newState, node, reaction, 0, node.depth+1);
//                        newStateCount++;
//                        System.out.println("Amount of states = " + newStateCount);
//                        System.out.println("Size of frontier = " + frontier.size());
                        if (!explored.contains(newNode.state)) {
                            frontier.addLast(newNode);
//                            exploredSize++;
                            explored.add(newNode.state);
                        }
                    }
                    //Break when we find a problem we need to solve.
                    break;
                }
            }
        }
    }

    public static boolean uniformCostSearch(HashMap<String, Integer> problems, KnowledgeBase knowledgeBase) {

        //Create initial node with default values.
        Node initialNode = new Node(problems, null, 0, 0);

        // Might not be necessary to have this if-statement for our problem.
        /*if(goalTest(initialNode)) {
            return solution(initialNode);
        }*/

        //Priority queue with map belonging to it for quick operations, like contains.
        PriorityQueue<Node> frontier = new PriorityQueue<>();
        //The meaning of "HashMap<String, Integer>" is "node.state".
        HashMap<HashMap<String, Integer>, Node> frontierMap = new HashMap<>();

        //Add the initial node to both frontier and the belonging map.
        frontierAdd(initialNode, frontier, frontierMap);

        HashSet<HashMap<String, Integer>> explored = new HashSet<>();

        //Variable for print statements.
//        int newStateCount = 0;
        for(;;) {
            //If frontier is empty, there are no more problems to solve and the result must be false.
            if(frontier.isEmpty()) {
                return false;
            }

            //Remove the head node from frontier and the belonging map.
            Node node = frontierRemove(frontier, frontierMap);

            explored.add(node.state);

            for (String key: node.state.keySet()) {
                if (node.state.get(key) < 0) {

                    //Get all the reactions that possibly can solve a state.
                    List<Reaction> reactions = knowledgeBase.getReactionsOf(key);


                    /* If there are no reactions for a molecule the list will be null. If the list is null
                    the for loop should continue.*/
                    if (reactions == null) {
                        continue;
                    }

                    for (Reaction reaction : reactions) {
                        HashMap<String, Integer> newState = new HashMap<>(node.state);

                        //Merge the state with the new state. That is the coefficients of the molecules.
                        reaction.getMap().forEach((k, v) -> newState.merge(k, v, (v1, v2) -> v1 + v2));

                        //Clean the state for all molecules that have the coefficient 0.
                        cleanState(newState);

                        //If the state contains nothing but positive coefficient there are no more problems to solve
                        //and a solution have been found.
                        if (goalTest(newState)) {
                            System.out.println("Solution:");
                            System.out.println(solution(reaction.toString() + "\n", node));
//                            System.out.println("Amount of states = " + newStateCount);
                            return true;
                        }

                        Node newNode = new Node(newState, node, reaction, node.pathCost+reaction.getCost(), node.depth+1);
//                        newStateCount++;
//                        System.out.println("Amount of states = " + newStateCount);
                        if (!explored.contains(newNode.state)) {
                            if (!frontierContains(frontierMap, newNode)) {
                                frontierAdd(newNode, frontier, frontierMap);
                            } else {
                                //At this point we know newNode is in frontier. Now check if the pathcost of newNode
                                //is greater or smaller than the existing node and update information accordingly.
                                Node oldFrontierNode = frontierMap.get(newNode.state);
                                if(oldFrontierNode.pathCost > newNode.pathCost) {
                                    updateFrontier(oldFrontierNode, newNode);
                                }
                            }
                        }
                    }
                    //Break when we find a problem we need to solve.
                    break;
                }
            }
        }
    }

    public static boolean iterativeDeepening(int maxDepth, HashMap<String, Integer> problems, KnowledgeBase knowledgeBase){
        //Initial max depth.
        int currentMaxDepth = 1;

        while(maxDepth > currentMaxDepth){
            if(depthFirstSearch(currentMaxDepth, 0, problems, knowledgeBase)){
                System.out.println("DEPTH OF SOLUTION = " + currentMaxDepth);
                System.out.println(stateCount);
                return true;
            }
            System.out.println(stateCount);
            stateCount = 0;
            System.out.println(++currentMaxDepth);
        }
        return false;
    }

    public static boolean depthFirstSearch(int maxDepth, int currentDepth, HashMap<String, Integer> problems, KnowledgeBase knowledgeBase){
<<<<<<< .mine
        //Create initial node with default values.
        Node node = new Node(problems, null, 0, currentDepth);
        //Node initialNode = new Node(problems, null, 0,);
=======

        //Node initialNode = new Node(problems, null, 0, 0);
>>>>>>> .r36
        if(currentDepth >= maxDepth) return false;

<<<<<<< .mine
//        LinkedList<Node> frontier = new LinkedList<>();
//        frontier.addLast(initialNode);
=======
            for (String key: problems.keySet()) {
                if (problems.get(key) < 0) {
>>>>>>> .r36

<<<<<<< .mine
        for(;;) {
//            if(frontier.isEmpty()) {
//                return false;
//            }
//            Node node = frontier.removeLast();
            //explored.add(node.state);

            for (String key: node.state.keySet()) {
                if (node.state.get(key) < 0) {

=======
>>>>>>> .r36
                    List<Reaction> reactions = knowledgeBase.getReactionsOf(key);
<<<<<<< .mine

                    System.out.println("reaction" + reactions);
                    System.out.println();

=======
>>>>>>> .r36
                    /* Checks no there's no reactions for a molecule the list will be null. If the list is null
                    the for loop should continue.*/
                    if (reactions == null) {
                        continue;
                    }

                    for (Reaction reaction : reactions) {
                            HashMap<String, Integer> newState = new HashMap<>(problems);
                            stateCount++;
                        reaction.getMap().forEach((k, v) -> newState.merge(k, v, (v1, v2) -> v1 + v2));

                        cleanState(newState);

                        if (goalTest(newState)) {
                            System.out.println(reaction.toString());
                            return true;
                        }
                        if(depthFirstSearch(maxDepth, currentDepth + 1, newState, knowledgeBase)){
                            System.out.println(reaction.toString());
                            return true;
<<<<<<< .mine
                        }
=======
                        };
>>>>>>> .r36
                    }
<<<<<<< .mine
                    //Break when we find a problem we need to solve.
=======
                    //Break when we find a Problem we need to solve.
>>>>>>> .r36
                    break;
                }
            }
<<<<<<< .mine
        }
=======
        return false;
>>>>>>> .r36
    }

    //Functions for the frontier used in Uniform Cost Search (UCS).

    private static boolean frontierContains(HashMap<HashMap<String, Integer>, Node> frontierMap, Node newNode) {
        return frontierMap.containsKey(newNode.state);
    }

    private static Node frontierRemove(PriorityQueue<Node> frontier, HashMap<HashMap<String, Integer>, Node> frontierMap) {
        Node node = frontier.poll();
        frontierMap.remove(node.state);
        return node;
    }

    private static void frontierAdd(Node initialNode, PriorityQueue<Node> frontier, HashMap<HashMap<String, Integer>, Node> frontierMap) {
        frontier.add(initialNode);
        frontierMap.put(initialNode.state, initialNode);
    }

    //Updates the node that is already in frontier with the values from the new node.
    private static void updateFrontier(Node oldNode, Node newNode) {
        oldNode.pathCost = newNode.pathCost;
        oldNode.parent = newNode.parent;
        oldNode.reaction = newNode.reaction;
        oldNode.depth = newNode.depth;
    }

    // Help methods.

    private static String solution(String s, Node node) {
        if(node.parent == null) return s;
        return solution(s+node.reaction.toString()+"\n", node.parent);
    }

    private static void cleanState(HashMap<String, Integer> newState) {
        Set<String> keys = new HashSet<>(newState.keySet());
        for (String keyProblem : keys) {
            if (newState.get(keyProblem) == 0) {
                newState.remove(keyProblem);
            }
        }
    }

    private static void printState(Node node) {
        System.out.println("Indhold af state:");
        System.out.println("Dybde: " + node.depth);
        for (String key : node.state.keySet()) {
            System.out.println(node.state.get(key) + key);
        }
        System.out.println();
    }

    private static boolean goalTest(Map<String, Integer> state) {
        for (String key : state.keySet()) {
            if (state.get(key) < 0) return false;
        }
        System.out.println("A solution exists.");
        return true;
    }
}
